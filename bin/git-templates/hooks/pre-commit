#!/bin/bash
#
# https://rnelson0.com/2014/06/16/puppet-and-git-205-git-hooks/
# https://github.com/mattiasgeniar/puppet-pre-commit-hook
#
# Authors:
#  Ronny Roethof
#  Mattias Geniar
#  Rob Nelson
#  Carsten Thiel

echo "### Committing as: $(git var GIT_COMMITTER_IDENT) with author $(git var GIT_AUTHOR_IDENT)"

echo "### Performing Syntax checks ###"

# PUPPET
if [ "$(command -v puppet)" ] ; then
  for file in $(git diff --name-only --cached | grep -E '\.(pp)')
  do
    if [[ -f $file && $file == *.pp ]] ; then
      puppet parser validate "${file}"
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: puppet parser failed at: $file"
        syntax_is_bad=1
      else
        echo "OK: $file looks valid"
      fi
    fi
  done
fi

# ERB TEMPLATE
if [ "$(command -v erb)" ] && [ "$(command -v ruby)" ] ; then
  for file in $(git diff --name-only --cached | grep -E '\.(erb)')
  do
    if [[ -f $file ]] ; then
      erb -P -x -T '-' "${file}" | ruby -c > /dev/null
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: ruby template parser failed at: $file"
        syntax_is_bad=1
      else
        echo "OK: $file looks like a valid ruby template"
      fi
    fi
  done
fi

# EPP TEMPLATE
if [ "$(command -v puppet)" ] ; then
  for file in $(git diff --name-only --cached | grep -E '\.(epp)')
  do
    if [[ -f $file ]] ; then
      puppet epp validate "${file}"
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: puppet template parser failed at: $file"
        syntax_is_bad=1
      else
        echo "OK: $file looks like a valid puppet template"
      fi
    fi
  done
fi

# YAML
if [ "$(command -v ruby)" ] ; then
  function checkyaml() {
    ruby -e "require 'yaml'; YAML.load_file('$1')"
  }
  for file in $(git diff --name-only --cached | grep -E '\.(yaml)')
  do
    if [[ -f $file ]] ; then
      checkyaml "${file}"
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: YAML syntax validation failed at: $file"
        syntax_is_bad=1
      else
        echo "OK: $file looks like a valid YAML file"
      fi
    fi
  done
fi

#METADATA.JSON
if [ "$(command -v metadata-json-lint)" ] ; then
  for file in $(git diff --name-only --cached | grep -E '(metadata)\.(json)')
  do
    if [[ -f $file ]] ; then
      metadata-json-lint "${file}"
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: metadata.json linting failed at: $file"
        syntax_is_bad=1
      else
        echo "OK: $file looks like a valid metadata.json"
      fi
    fi
  done
fi

#Markdown
if [ "$(command -v mdl)" ] ; then
  for file in $(git diff --name-only --cached | grep -E '\.(md)')
  do
    if [[ -f $file ]] ; then
      mdl "${file}"
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: markdown linting failed at: $file"
        syntax_is_bad=1
      else
        gofmt -l "${file}"
        if [[ $? -ne 0 ]] ; then
          echo "ERROR: markdown linting failed at: $file"
          syntax_is_bad=1
        else
          echo "OK: $file looks like a valid markdown file"
        fi
      fi
    fi
  done
fi

#GOLANG
if [ "$(command -v go)" ] && [ "$(command -v golint)" ] ; then
  for file in $(git diff --name-only --cached | grep -E '\.(go)')
  do
    if [[ -f $file ]] ; then
      golint -set_exit_status "${file}"
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: GO linting failed at: $file"
        syntax_is_bad=1
      else
        gofmt -l "${file}"
        if [[ $? -ne 0 ]] ; then
          echo "ERROR: GO fmt failed at: $file"
          syntax_is_bad=1
        else
          echo "OK: $file looks like a valid GO file"
        fi
      fi
    fi
  done
fi

#TERRAFORM
if [ "$(command -v terraform)" ] && [ "$(command -v tflint)" ] ; then
  for file in $(git diff --name-only --cached | grep -E '\.(tf)$')
  do
    if [[ -f $file ]] ; then
      terraform fmt -check "${file}"
      if [[ $? -ne 0 ]] ; then
        echo "ERROR: Formating wrong for: ${file}"
        syntax_is_bad=1
      else
        tflint --minimum-failure-severity=error --filter="${file}"
        if [[ $? -ne 0 ]] ; then
          echo "ERROR: TFlint failed at: $file"
          syntax_is_bad=1
        else
          echo "OK: $file looks like a properly formatted Terraform file"
        fi
      fi
    fi
  done
  # validate only if we haven't failed already
  if [[ ! $syntax_is_bad -eq 1 ]] ; then
    echo -n "Performing Terraform validate ..."
    terraform validate
    if [[ $? -ne 0 ]] ; then
      echo "\nERROR: Terraform validate failed."
      syntax_is_bad=1
    else
      echo " -- OK"
    fi
  fi
fi


if [[ $syntax_is_bad -eq 1 ]]
then
  echo "FATAL: Syntax is bad. See above errors"
  echo "Aborting"
  exit 1
else
  echo "Everything looks good."
fi

